<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exam Master - Affordable Competitive Exam Preparation</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --accent: #4cc9f0;
            --light: #f8f9fa;
            --dark: #212529;
            --success: #4bb543;
            --danger: #dc3545;
            --warning: #ffc107;
            --easy: #28a745;
            --medium: #ffc107;
            --hard: #dc3545;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fb;
            color: var(--dark);
            line-height: 1.6;
        }
        
        .container {
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        /* Header Styles */
        header {
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
        }
        
        .logo i {
            font-size: 1.8rem;
        }
        
        nav ul {
            display: flex;
            list-style: none;
            gap: 25px;
        }
        
        nav a {
            text-decoration: none;
            color: var(--dark);
            font-weight: 500;
            transition: color 0.3s;
        }
        
        nav a:hover {
            color: var(--primary);
        }
        
        .auth-buttons {
            display: flex;
            gap: 15px;
        }
        
        .btn {
            padding: 8px 20px;
            border-radius: 5px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
            font-size: 0.9rem;
        }
        
        .btn-outline {
            background: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: var(--secondary);
        }
        
        .btn-outline:hover {
            background: var(--primary);
            color: white;
        }
        
        .btn-success {
            background: var(--success);
            color: white;
        }
        
        .btn-warning {
            background: var(--warning);
            color: var(--dark);
        }
        
        .btn-danger {
            background: var(--danger);
            color: white;
        }
        
        .btn-easy {
            background: var(--easy);
            color: white;
        }
        
        .btn-medium {
            background: var(--medium);
            color: var(--dark);
        }
        
        .btn-hard {
            background: var(--hard);
            color: white;
        }
        
        .btn-block {
            display: block;
            width: 100%;
        }
        
        /* Hero Section */
        .hero {
            padding: 80px 0;
            background: linear-gradient(135deg, #4361ee, #3a0ca3);
            color: white;
            text-align: center;
        }
        
        .hero h1 {
            font-size: 2.8rem;
            margin-bottom: 20px;
        }
        
        .hero p {
            font-size: 1.2rem;
            max-width: 700px;
            margin: 0 auto 30px;
            opacity: 0.9;
        }
        
        .hero-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
        }
        
        .hero .btn {
            padding: 12px 30px;
            font-size: 1rem;
        }
        
        .btn-light {
            background: white;
            color: var(--primary);
        }
        
        .btn-light:hover {
            background: #f0f0f0;
        }
        
        /* Features Section */
        .features {
            padding: 80px 0;
            background: white;
        }
        
        .section-title {
            text-align: center;
            margin-bottom: 50px;
        }
        
        .section-title h2 {
            font-size: 2.2rem;
            color: var(--dark);
            margin-bottom: 15px;
        }
        
        .section-title p {
            color: #6c757d;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }
        
        .feature-card {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            text-align: center;
            transition: transform 0.3s;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
        }
        
        .feature-icon {
            width: 70px;
            height: 70px;
            background: rgba(67, 97, 238, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
        }
        
        .feature-icon i {
            font-size: 1.8rem;
            color: var(--primary);
        }
        
        .feature-card h3 {
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        /* Products Section */
        .products {
            padding: 80px 0;
            background: #f8f9fa;
        }
        
        .category-tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 40px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .tab-btn {
            padding: 12px 25px;
            background: none;
            border: none;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            color: #6c757d;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        
        .tab-btn.active {
            color: var(--primary);
            border-bottom: 3px solid var(--primary);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
        }
        
        .product-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
        }
        
        .product-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .product-difficulty {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .product-title {
            font-size: 1.3rem;
            margin-bottom: 10px;
        }
        
        .product-description {
            color: #6c757d;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }
        
        .product-meta {
            display: flex;
            justify-content: space-between;
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .product-price {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
            text-align: center;
            padding: 15px;
        }
        
        .product-actions {
            padding: 0 20px 20px;
        }
        
        /* Auth Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background: white;
            border-radius: 10px;
            width: 90%;
            max-width: 450px;
            padding: 30px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .modal-header h2 {
            font-size: 1.5rem;
            color: var(--dark);
        }
        
        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6c757d;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }
        
        .form-control:focus {
            border-color: var(--primary);
            outline: none;
        }
        
        .form-footer {
            text-align: center;
            margin-top: 20px;
        }
        
        .form-footer a {
            color: var(--primary);
            text-decoration: none;
        }
        
        /* User Dashboard */
        .dashboard {
            display: none;
            padding: 40px 0;
        }
        
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .user-avatar {
            width: 50px;
            height: 50px;
            background: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .dashboard-tabs {
            display: flex;
            margin-bottom: 30px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .dashboard-tab {
            padding: 12px 25px;
            background: none;
            border: none;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            color: #6c757d;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        
        .dashboard-tab.active {
            color: var(--primary);
            border-bottom: 3px solid var(--primary);
        }
        
        .dashboard-content {
            display: none;
        }
        
        .dashboard-content.active {
            display: block;
        }
        
        .purchases-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .purchase-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }
        
        .purchase-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .purchase-title {
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .purchase-type {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            background: rgba(67, 97, 238, 0.1);
            color: var(--primary);
        }
        
        .purchase-details {
            color: #6c757d;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }
        
        .purchase-actions {
            display: flex;
            gap: 10px;
        }
        
        .timer {
            font-size: 0.9rem;
            color: var(--danger);
            font-weight: 600;
        }
        
        /* Mock Test Interface */
        .test-interface {
            display: none;
            padding: 40px 0;
        }
        
        .test-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }
        
        .test-timer {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
        }
        
        .test-progress {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            margin: 20px 0;
            overflow: hidden;
        }
        
        .test-progress-bar {
            height: 100%;
            background: var(--primary);
            width: 0%;
            transition: width 0.3s;
        }
        
        .question-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }
        
        .question-text {
            font-size: 1.1rem;
            margin-bottom: 20px;
            font-weight: 500;
        }
        
        .options-list {
            list-style: none;
        }
        
        .option-item {
            padding: 12px 15px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .option-item:hover {
            background: #f8f9fa;
        }
        
        .option-item.selected {
            background: rgba(67, 97, 238, 0.1);
            border-color: var(--primary);
        }
        
        .test-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }
        
        /* Results Section */
        .results {
            display: none;
            padding: 40px 0;
            text-align: center;
        }
        
        .score-circle {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 0 auto 30px;
            font-weight: 700;
        }
        
        .score-percentage {
            font-size: 2.5rem;
            line-height: 1;
        }
        
        .score-text {
            font-size: 1rem;
        }
        
        .results-details {
            max-width: 500px;
            margin: 0 auto 30px;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }
        
        .result-stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary);
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #6c757d;
        }
        
        .share-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }
        
        /* Footer */
        footer {
            background: var(--dark);
            color: white;
            padding: 60px 0 30px;
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 40px;
            margin-bottom: 40px;
        }
        
        .footer-column h3 {
            font-size: 1.2rem;
            margin-bottom: 20px;
            position: relative;
            padding-bottom: 10px;
        }
        
        .footer-column h3::after {
            content: '';
            position: absolute;
            left: 0;
            bottom: 0;
            width: 40px;
            height: 2px;
            background: var(--primary);
        }
        
        .footer-column ul {
            list-style: none;
        }
        
        .footer-column ul li {
            margin-bottom: 10px;
        }
        
        .footer-column a {
            color: #adb5bd;
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .footer-column a:hover {
            color: white;
        }
        
        .social-links {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        
        .social-links a {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            color: white;
            transition: background 0.3s;
        }
        
        .social-links a:hover {
            background: var(--primary);
        }
        
        .footer-bottom {
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            color: #adb5bd;
            font-size: 0.9rem;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            nav ul {
                gap: 15px;
            }
            
            .hero h1 {
                font-size: 2.2rem;
            }
            
            .hero-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .hero .btn {
                width: 100%;
                max-width: 250px;
            }
            
            .category-tabs {
                flex-wrap: wrap;
            }
            
            .test-header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-graduation-cap"></i>
                    <span>Exam Master</span>
                </div>
                <nav>
                    <ul>
                        <li><a href="#home">Home</a></li>
                        <li><a href="#products">Products</a></li>
                        <li><a href="#free-test">Free Test</a></li>
                        <li><a href="#contact">Contact</a></li>
                    </ul>
                </nav>
                <div class="auth-buttons">
                    <button class="btn btn-outline" id="loginBtn">Login</button>
                    <button class="btn btn-primary" id="signupBtn">Sign Up</button>
                </div>
            </div>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="home">
        <div class="container">
            <h1>Ace Competitive Exams with Affordable Mock Tests</h1>
            <p>High-quality mock tests and PDFs for JKSSB, SSC, and other competitive exams at just ₹19-39</p>
            <div class="hero-buttons">
                <button class="btn btn-light" id="exploreTests">Explore Mock Tests</button>
                <button class="btn btn-outline" id="freeTestBtn">Try Free Test</button>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section class="features">
        <div class="container">
            <div class="section-title">
                <h2>Why Choose Exam Master?</h2>
                <p>We provide everything you need to prepare effectively for competitive exams</p>
            </div>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <h3>Timed Mock Tests</h3>
                    <p>100 MCQs in 100 minutes with real exam pattern and difficulty levels</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                    <h3>Affordable Pricing</h3>
                    <p>High-quality tests starting at just ₹19. Pay per test, no subscriptions</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">
                        <i class="fas fa-file-pdf"></i>
                    </div>
                    <h3>Subject PDFs</h3>
                    <p>Comprehensive PDFs on Computer, History, Polity and more at ₹39 each</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Products Section -->
    <section class="products" id="products">
        <div class="container">
            <div class="section-title">
                <h2>Our Products</h2>
                <p>Choose from our wide range of mock tests and study materials</p>
            </div>
            
            <div class="category-tabs">
                <button class="tab-btn active" data-tab="mock-tests">Mock Tests</button>
                <button class="tab-btn" data-tab="pdfs">Study PDFs</button>
                <button class="tab-btn" data-tab="free">Free Resources</button>
            </div>
            
            <!-- Mock Tests Tab -->
            <div class="tab-content active" id="mock-tests">
                <div class="products-grid">
                    <!-- JKSSB Mock Tests -->
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-easy">Easy</span>
                            <h3 class="product-title">JKSSB Junior Assistant</h3>
                            <p class="product-description">100 MCQs covering General Knowledge, Mathematics, English and Reasoning</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 100 Questions</span>
                                <span><i class="fas fa-clock"></i> 100 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">₹19</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="JKSSB Junior Assistant" data-price="19" data-type="mock">Purchase Now</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-medium">Medium</span>
                            <h3 class="product-title">JKSSB Finance Account Assistant</h3>
                            <p class="product-description">Advanced test with focus on Accounts, Mathematics and Finance topics</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 100 Questions</span>
                                <span><i class="fas fa-clock"></i> 100 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">₹29</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="JKSSB Finance Account Assistant" data-price="29" data-type="mock">Purchase Now</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-hard">Hard</span>
                            <h3 class="product-title">JKSSB Patwari</h3>
                            <p class="product-description">Comprehensive test with advanced questions for Patwari exam</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 100 Questions</span>
                                <span><i class="fas fa-clock"></i> 100 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">₹39</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="JKSSB Patwari" data-price="39" data-type="mock">Purchase Now</button>
                        </div>
                    </div>
                    
                    <!-- SSC Mock Tests -->
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-medium">Medium</span>
                            <h3 class="product-title">SSC CHSL Tier 1</h3>
                            <p class="product-description">General Intelligence, Quantitative Aptitude, English and General Awareness</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 100 Questions</span>
                                <span><i class="fas fa-clock"></i> 100 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">₹29</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="SSC CHSL Tier 1" data-price="29" data-type="mock">Purchase Now</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-hard">Hard</span>
                            <h3 class="product-title">SSC CGL Tier 1</h3>
                            <p class="product-description">Advanced level questions for SSC Combined Graduate Level exam</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 100 Questions</span>
                                <span><i class="fas fa-clock"></i> 100 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">₹39</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="SSC CGL Tier 1" data-price="39" data-type="mock">Purchase Now</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- PDFs Tab -->
            <div class="tab-content" id="pdfs">
                <div class="products-grid">
                    <div class="product-card">
                        <div class="product-header">
                            <h3 class="product-title">Computer Fundamentals</h3>
                            <p class="product-description">Complete guide to computer basics, hardware, software and applications</p>
                            <div class="product-meta">
                                <span><i class="fas fa-file-pdf"></i> PDF Format</span>
                                <span><i class="fas fa-book"></i> 120 Pages</span>
                            </div>
                        </div>
                        <div class="product-price">₹39</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="Computer Fundamentals PDF" data-price="39" data-type="pdf">Purchase Now</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <h3 class="product-title">Indian History</h3>
                            <p class="product-description">Ancient, Medieval and Modern Indian History with important events</p>
                            <div class="product-meta">
                                <span><i class="fas fa-file-pdf"></i> PDF Format</span>
                                <span><i class="fas fa-book"></i> 150 Pages</span>
                            </div>
                        </div>
                        <div class="product-price">₹39</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="Indian History PDF" data-price="39" data-type="pdf">Purchase Now</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <h3 class="product-title">Indian Polity</h3>
                            <p class="product-description">Constitution, Parliament, Judiciary and Governance structure</p>
                            <div class="product-meta">
                                <span><i class="fas fa-file-pdf"></i> PDF Format</span>
                                <span><i class="fas fa-book"></i> 110 Pages</span>
                            </div>
                        </div>
                        <div class="product-price">₹39</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="Indian Polity PDF" data-price="39" data-type="pdf">Purchase Now</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <h3 class="product-title">Geography of India</h3>
                            <p class="product-description">Physical, Economic and Social Geography with maps and diagrams</p>
                            <div class="product-meta">
                                <span><i class="fas fa-file-pdf"></i> PDF Format</span>
                                <span><i class="fas fa-book"></i> 130 Pages</span>
                            </div>
                        </div>
                        <div class="product-price">₹39</div>
                        <div class="product-actions">
                            <button class="btn btn-primary btn-block purchase-btn" data-product="Geography of India PDF" data-price="39" data-type="pdf">Purchase Now</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Free Resources Tab -->
            <div class="tab-content" id="free">
                <div class="products-grid">
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-easy">Free</span>
                            <h3 class="product-title">General Knowledge Basics</h3>
                            <p class="product-description">10 MCQs covering basic General Knowledge questions in 8 minutes</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 10 Questions</span>
                                <span><i class="fas fa-clock"></i> 8 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">FREE</div>
                        <div class="product-actions">
                            <button class="btn btn-success btn-block start-free-test">Start Test</button>
                        </div>
                    </div>
                    
                    <div class="product-card">
                        <div class="product-header">
                            <span class="product-difficulty btn-easy">Free</span>
                            <h3 class="product-title">Mathematics Basics</h3>
                            <p class="product-description">10 basic mathematics questions to test your calculation skills</p>
                            <div class="product-meta">
                                <span><i class="fas fa-question-circle"></i> 10 Questions</span>
                                <span><i class="fas fa-clock"></i> 8 Minutes</span>
                            </div>
                        </div>
                        <div class="product-price">FREE</div>
                        <div class="product-actions">
                            <button class="btn btn-success btn-block start-free-test">Start Test</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Login Modal -->
    <div class="modal" id="loginModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Login to Your Account</h2>
                <button class="close-modal">&times;</button>
            </div>
            <form id="loginForm">
                <div class="form-group">
                    <label for="loginEmail">Email</label>
                    <input type="email" id="loginEmail" class="form-control" placeholder="Enter your email" required>
                </div>
                <div class="form-group">
                    <label for="loginPassword">Password</label>
                    <input type="password" id="loginPassword" class="form-control" placeholder="Enter your password" required>
                </div>
                <button type="submit" class="btn btn-primary btn-block">Login</button>
                <div class="form-footer">
                    <p>Don't have an account? <a href="#" id="switchToSignup">Sign up</a></p>
                </div>
            </form>
        </div>
    </div>

    <!-- Signup Modal -->
    <div class="modal" id="signupModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Create an Account</h2>
                <button class="close-modal">&times;</button>
            </div>
            <form id="signupForm">
                <div class="form-group">
                    <label for="signupName">Full Name</label>
                    <input type="text" id="signupName" class="form-control" placeholder="Enter your full name" required>
                </div>
                <div class="form-group">
                    <label for="signupEmail">Email</label>
                    <input type="email" id="signupEmail" class="form-control" placeholder="Enter your email" required>
                </div>
                <div class="form-group">
                    <label for="signupPassword">Password</label>
                    <input type="password" id="signupPassword" class="form-control" placeholder="Create a password" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" class="form-control" placeholder="Confirm your password" required>
                </div>
                <button type="submit" class="btn btn-primary btn-block">Sign Up</button>
                <div class="form-footer">
                    <p>Already have an account? <a href="#" id="switchToLogin">Login</a></p>
                </div>
            </form>
        </div>
    </div>

    <!-- Payment Modal -->
    <div class="modal" id="paymentModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Complete Your Purchase</h2>
                <button class="close-modal">&times;</button>
            </div>
            <div id="paymentDetails">
                <p>You're purchasing: <strong id="purchaseProductName"></strong></p>
                <p>Price: <strong id="purchasePrice"></strong></p>
                <div class="form-group">
                    <label for="razorpayEmail">Email for Payment</label>
                    <input type="email" id="razorpayEmail" class="form-control" placeholder="Enter email for payment receipt" required>
                </div>
                <button class="btn btn-success btn-block" id="proceedPayment">Proceed to Pay ₹<span id="paymentAmount">0</span></button>
            </div>
        </div>
    </div>

    <!-- User Dashboard -->
    <section class="dashboard" id="dashboard">
        <div class="container">
            <div class="dashboard-header">
                <div class="user-info">
                    <div class="user-avatar" id="userAvatar">U</div>
                    <div>
                        <h3 id="userName">User Name</h3>
                        <p id="userEmail">user@example.com</p>
                    </div>
                </div>
                <button class="btn btn-outline" id="logoutBtn">Logout</button>
            </div>
            
            <div class="dashboard-tabs">
                <button class="dashboard-tab active" data-tab="purchases">My Purchases</button>
                <button class="dashboard-tab" data-tab="mock-tests">My Mock Tests</button>
                <button class="dashboard-tab" data-tab="pdfs">My PDFs</button>
            </div>
            
            <div class="dashboard-content active" id="purchases-content">
                <h2 style="margin-bottom: 20px;">Recent Purchases</h2>
                <div class="purchases-grid" id="purchasesList">
                    <!-- Purchases will be dynamically added here -->
                </div>
            </div>
            
            <div class="dashboard-content" id="mock-tests-content">
                <h2 style="margin-bottom: 20px;">My Mock Tests</h2>
                <div class="purchases-grid" id="mockTestsList">
                    <!-- Mock tests will be dynamically added here -->
                </div>
            </div>
            
            <div class="dashboard-content" id="pdfs-content">
                <h2 style="margin-bottom: 20px;">My PDFs</h2>
                <div class="purchases-grid" id="pdfsList">
                    <!-- PDFs will be dynamically added here -->
                </div>
            </div>
        </div>
    </section>

    <!-- Mock Test Interface -->
    <section class="test-interface" id="testInterface">
        <div class="container">
            <div class="test-header">
                <div>
                    <h2 id="testTitle">Mock Test</h2>
                    <p id="testDescription">100 Questions • 100 Minutes</p>
                </div>
                <div class="test-timer" id="testTimer">100:00</div>
            </div>
            
            <div class="test-progress">
                <div class="test-progress-bar" id="testProgress"></div>
            </div>
            
            <div class="question-card">
                <div class="question-text" id="questionText">Question will appear here</div>
                <ul class="options-list" id="optionsList">
                    <!-- Options will be dynamically added here -->
                </ul>
            </div>
            
            <div class="test-actions">
                <button class="btn btn-outline" id="prevQuestion">Previous</button>
                <button class="btn btn-primary" id="nextQuestion">Next</button>
            </div>
        </div>
    </section>

    <!-- Results Section -->
    <section class="results" id="resultsSection">
        <div class="container">
            <div class="score-circle">
                <div class="score-percentage" id="scorePercentage">0%</div>
                <div class="score-text">Score</div>
            </div>
            
            <div class="results-details">
                <h2>Test Completed!</h2>
                <p>You have successfully completed the mock test.</p>
                
                <div class="result-stats">
                    <div class="stat-item">
                        <div class="stat-value" id="correctAnswers">0</div>
                        <div class="stat-label">Correct</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="wrongAnswers">0</div>
                        <div class="stat-label">Wrong</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="skippedQuestions">0</div>
                        <div class="stat-label">Skipped</div>
                    </div>
                </div>
                
                <div class="share-buttons">
                    <button class="btn btn-primary" id="shareScore">
                        <i class="fas fa-share-alt"></i> Share Score
                    </button>
                    <button class="btn btn-outline" id="backToDashboard">Back to Dashboard</button>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer id="contact">
        <div class="container">
            <div class="footer-content">
                <div class="footer-column">
                    <h3>Exam Master</h3>
                    <p>Your one-stop solution for affordable competitive exam preparation.</p>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-facebook-f"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>
                <div class="footer-column">
                    <h3>Quick Links</h3>
                    <ul>
                        <li><a href="#home">Home</a></li>
                        <li><a href="#products">Products</a></li>
                        <li><a href="#free-test">Free Test</a></li>
                    </ul>
                </div>
                <div class="footer-column">
                    <h3>Support</h3>
                    <ul>
                        <li><a href="#">FAQ</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                        <li><a href="#">Terms of Service</a></li>
                        <li><a href="#">Contact Us</a></li>
                    </ul>
                </div>
                <div class="footer-column">
                    <h3>Contact Info</h3>
                    <ul>
                        <li><i class="fas fa-envelope"></i> support@exammaster.com</li>
                        <li><i class="fas fa-phone"></i> +91 98765 43210</li>
                    </ul>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2023 Exam Master. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        // DOM Elements
        const loginBtn = document.getElementById('loginBtn');
        const signupBtn = document.getElementById('signupBtn');
        const loginModal = document.getElementById('loginModal');
        const signupModal = document.getElementById('signupModal');
        const paymentModal = document.getElementById('paymentModal');
        const closeModalBtns = document.querySelectorAll('.close-modal');
        const switchToSignup = document.getElementById('switchToSignup');
        const switchToLogin = document.getElementById('switchToLogin');
        const loginForm = document.getElementById('loginForm');
        const signupForm = document.getElementById('signupForm');
        const dashboard = document.getElementById('dashboard');
        const logoutBtn = document.getElementById('logoutBtn');
        const userAvatar = document.getElementById('userAvatar');
        const userName = document.getElementById('userName');
        const userEmail = document.getElementById('userEmail');
        const exploreTestsBtn = document.getElementById('exploreTests');
        const freeTestBtn = document.getElementById('freeTestBtn');
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        const purchaseBtns = document.querySelectorAll('.purchase-btn');
        const startFreeTestBtns = document.querySelectorAll('.start-free-test');
        const testInterface = document.getElementById('testInterface');
        const resultsSection = document.getElementById('resultsSection');
        const testTimer = document.getElementById('testTimer');
        const testProgress = document.getElementById('testProgress');
        const questionText = document.getElementById('questionText');
        const optionsList = document.getElementById('optionsList');
        const nextQuestionBtn = document.getElementById('nextQuestion');
        const prevQuestionBtn = document.getElementById('prevQuestion');
        const scorePercentage = document.getElementById('scorePercentage');
        const correctAnswers = document.getElementById('correctAnswers');
        const wrongAnswers = document.getElementById('wrongAnswers');
        const skippedQuestions = document.getElementById('skippedQuestions');
        const shareScoreBtn = document.getElementById('shareScore');
        const backToDashboardBtn = document.getElementById('backToDashboard');
        const proceedPaymentBtn = document.getElementById('proceedPayment');
        const purchaseProductName = document.getElementById('purchaseProductName');
        const purchasePrice = document.getElementById('purchasePrice');
        const paymentAmount = document.getElementById('paymentAmount');
        const dashboardTabs = document.querySelectorAll('.dashboard-tab');
        const dashboardContents = document.querySelectorAll('.dashboard-content');
        const purchasesList = document.getElementById('purchasesList');
        const mockTestsList = document.getElementById('mockTestsList');
        const pdfsList = document.getElementById('pdfsList');

        // Application State
        let currentUser = null;
        let currentTest = null;
        let currentQuestionIndex = 0;
        let userAnswers = [];
        let testTimerInterval = null;
        let timeRemaining = 0;
        let currentPurchaseProduct = null;

        // Sample Questions for Free Test
        const freeTestQuestions = [
            {
                question: "What is the capital of India?",
                options: ["Mumbai", "Kolkata", "New Delhi", "Chennai"],
                correctAnswer: 2
            },
            {
                question: "Who is known as the Father of the Indian Constitution?",
                options: ["Mahatma Gandhi", "Jawaharlal Nehru", "B.R. Ambedkar", "Sardar Patel"],
                correctAnswer: 2
            },
            {
                question: "The Himalayas are located in which continent?",
                options: ["Europe", "Africa", "Asia", "South America"],
                correctAnswer: 2
            },
            {
                question: "Which is the largest planet in our solar system?",
                options: ["Earth", "Mars", "Jupiter", "Saturn"],
                correctAnswer: 2
            },
            {
                question: "What is the chemical symbol for Gold?",
                options: ["Go", "Gd", "Au", "Ag"],
                correctAnswer: 2
            },
            {
                question: "Which river is known as the Ganga of the South?",
                options: ["Kaveri", "Godavari", "Krishna", "Mahanadi"],
                correctAnswer: 0
            },
            {
                question: "Who wrote the Indian National Anthem?",
                options: ["Rabindranath Tagore", "Bankim Chandra Chatterjee", "Sarojini Naidu", "Mahatma Gandhi"],
                correctAnswer: 0
            },
            {
                question: "What is the currency of Japan?",
                options: ["Yuan", "Won", "Yen", "Ringgit"],
                correctAnswer: 2
            },
            {
                question: "Which is the smallest state in India by area?",
                options: ["Goa", "Sikkim", "Tripura", "Mizoram"],
                correctAnswer: 0
            },
            {
                question: "The Red Fort is located in which city?",
                options: ["Agra", "Mumbai", "Delhi", "Jaipur"],
                correctAnswer: 2
            }
        ];

        // Mock Test Questions (Sample)
        const mockTestQuestions = [
            // This would be replaced with actual 100 questions in a real implementation
            ...freeTestQuestions,
            // Adding more sample questions to demonstrate
            {
                question: "What is the square root of 64?",
                options: ["6", "7", "8", "9"],
                correctAnswer: 2
            },
            {
                question: "Which planet is known as the Red Planet?",
                options: ["Venus", "Mars", "Jupiter", "Saturn"],
                correctAnswer: 1
            },
            {
                question: "Who invented the telephone?",
                options: ["Thomas Edison", "Alexander Graham Bell", "Nikola Tesla", "Albert Einstein"],
                correctAnswer: 1
            }
        ];

        // Show Login Modal
        loginBtn.addEventListener('click', () => {
            loginModal.style.display = 'flex';
        });

        // Show Signup Modal
        signupBtn.addEventListener('click', () => {
            signupModal.style.display = 'flex';
        });

        // Close Modals
        closeModalBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                loginModal.style.display = 'none';
                signupModal.style.display = 'none';
                paymentModal.style.display = 'none';
            });
        });

        // Switch between Login and Signup modals
        switchToSignup.addEventListener('click', (e) => {
            e.preventDefault();
            loginModal.style.display = 'none';
            signupModal.style.display = 'flex';
        });

        switchToLogin.addEventListener('click', (e) => {
            e.preventDefault();
            signupModal.style.display = 'none';
            loginModal.style.display = 'flex';
        });

        // Tab functionality
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabId = btn.getAttribute('data-tab');
                
                // Update active tab
                tabBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Show active content
                tabContents.forEach(content => {
                    content.classList.remove('active');
                    if (content.id === tabId) {
                        content.classList.add('active');
                    }
                });
            });
        });

        // Dashboard tabs
        dashboardTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                // Update active tab
                dashboardTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Show active content
                dashboardContents.forEach(content => {
                    content.classList.remove('active');
                    if (content.id === `${tabId}-content`) {
                        content.classList.add('active');
                    }
                });
            });
        });

        // Purchase buttons
        purchaseBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                if (!currentUser) {
                    alert('Please login to purchase products');
                    loginModal.style.display = 'flex';
                    return;
                }
                
                const productName = btn.getAttribute('data-product');
                const price = btn.getAttribute('data-price');
                const type = btn.getAttribute('data-type');
                
                currentPurchaseProduct = {
                    name: productName,
                    price: price,
                    type: type
                };
                
                purchaseProductName.textContent = productName;
                purchasePrice.textContent = `₹${price}`;
                paymentAmount.textContent = price;
                paymentModal.style.display = 'flex';
            });
        });

        // Proceed to payment
        proceedPaymentBtn.addEventListener('click', () => {
            // In a real implementation, this would integrate with Razorpay
            // For demo, we'll simulate a successful payment
            
            const email = document.getElementById('razorpayEmail').value;
            if (!email) {
                alert('Please enter your email for payment receipt');
                return;
            }
            
            // Simulate payment processing
            alert(`Payment of ₹${currentPurchaseProduct.price} successful!`);
            
            // Add to user's purchases
            addToPurchases(currentPurchaseProduct);
            
            // Close payment modal
            paymentModal.style.display = 'none';
            
            // Reset form
            document.getElementById('razorpayEmail').value = '';
        });

        // Free test buttons
        startFreeTestBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                if (!currentUser) {
                    alert('Please login to take free tests');
                    loginModal.style.display = 'flex';
                    return;
                }
                
                startTest(freeTestQuestions, 8 * 60, "Free General Knowledge Test");
            });
        });

        // Explore tests button
        exploreTestsBtn.addEventListener('click', () => {
            document.querySelector('[data-tab="mock-tests"]').click();
        });

        // Free test button in hero
        freeTestBtn.addEventListener('click', () => {
            document.querySelector('[data-tab="free"]').click();
        });

        // Login Form Submission
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // In a real app, you would validate with Supabase here
            // For demo, we'll just simulate a successful login
            simulateLogin(email, password);
        });

        // Signup Form Submission
        signupForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (password !== confirmPassword) {
                alert('Passwords do not match!');
                return;
            }
            
            // In a real app, you would create user in Supabase here
            // For demo, we'll just simulate a successful signup
            simulateSignup(name, email);
        });

        // Logout
        logoutBtn.addEventListener('click', () => {
            // In a real app, you would call Supabase auth.signOut()
            // For demo, we'll just hide the dashboard
            dashboard.style.display = 'none';
            testInterface.style.display = 'none';
            resultsSection.style.display = 'none';
            document.querySelector('header').style.display = 'block';
            document.querySelector('.hero').style.display = 'block';
            document.querySelector('.features').style.display = 'block';
            document.querySelector('.products').style.display = 'block';
            document.querySelector('footer').style.display = 'block';
            
            currentUser = null;
        });

        // Test navigation
        nextQuestionBtn.addEventListener('click', () => {
            if (currentQuestionIndex < currentTest.questions.length - 1) {
                currentQuestionIndex++;
                displayQuestion();
            } else {
                finishTest();
            }
        });

        prevQuestionBtn.addEventListener('click', () => {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion();
            }
        });

        // Share score
        shareScoreBtn.addEventListener('click', () => {
            const score = scorePercentage.textContent;
            alert(`Share your score: I scored ${score} on ${currentTest.title} mock test on Exam Master!`);
        });

        // Back to dashboard from results
        backToDashboardBtn.addEventListener('click', () => {
            resultsSection.style.display = 'none';
            dashboard.style.display = 'block';
        });

        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === loginModal) {
                loginModal.style.display = 'none';
            }
            if (e.target === signupModal) {
                signupModal.style.display = 'none';
            }
            if (e.target === paymentModal) {
                paymentModal.style.display = 'none';
            }
        });

        // Simulate Login (for demo purposes)
        function simulateLogin(email, password) {
            // Close modal
            loginModal.style.display = 'none';
            
            // Set current user
            currentUser = {
                name: email.split('@')[0],
                email: email,
                purchases: JSON.parse(localStorage.getItem(`purchases_${email}`)) || []
            };
            
            // Update user info
            userName.textContent = currentUser.name;
            userEmail.textContent = currentUser.email;
            userAvatar.textContent = currentUser.name.charAt(0).toUpperCase();
            
            // Show dashboard and hide other sections
            showDashboard();
            
            // Show success message
            alert('Login successful!');
        }

        // Simulate Signup (for demo purposes)
        function simulateSignup(name, email) {
            // Close modal
            signupModal.style.display = 'none';
            
            // Set current user
            currentUser = {
                name: name,
                email: email,
                purchases: []
            };
            
            // Update user info
            userName.textContent = currentUser.name;
            userEmail.textContent = currentUser.email;
            userAvatar.textContent = currentUser.name.charAt(0).toUpperCase();
            
            // Show dashboard and hide other sections
            showDashboard();
            
            // Show success message
            alert('Account created successfully!');
        }

        // Show dashboard
        function showDashboard() {
            dashboard.style.display = 'block';
            testInterface.style.display = 'none';
            resultsSection.style.display = 'none';
            document.querySelector('header').style.display = 'none';
            document.querySelector('.hero').style.display = 'none';
            document.querySelector('.features').style.display = 'none';
            document.querySelector('.products').style.display = 'none';
            document.querySelector('footer').style.display = 'none';
            
            // Update purchases list
            updatePurchasesList();
        }

        // Add to purchases
        function addToPurchases(product) {
            const purchase = {
                id: Date.now(),
                name: product.name,
                price: product.price,
                type: product.type,
                date: new Date().toLocaleDateString(),
                // For mock tests, set availability for 2 hours
                availableUntil: product.type === 'mock' ? new Date(Date.now() + 2 * 60 * 60 * 1000) : null,
                // For PDFs, set download availability for 24 hours
                downloadAvailableUntil: product.type === 'pdf' ? new Date(Date.now() + 24 * 60 * 60 * 1000) : null,
                started: false,
                completed: false
            };
            
            currentUser.purchases.push(purchase);
            
            // Save to localStorage (in real app, this would be in Supabase)
            localStorage.setItem(`purchases_${currentUser.email}`, JSON.stringify(currentUser.purchases));
            
            // Update UI
            updatePurchasesList();
            
            alert(`Purchase successful! ${product.type === 'pdf' ? 'You can now download the PDF for 24 hours.' : 'You can start the test within 2 hours.'}`);
        }

        // Update purchases list
        function updatePurchasesList() {
            purchasesList.innerHTML = '';
            mockTestsList.innerHTML = '';
            pdfsList.innerHTML = '';
            
            if (currentUser.purchases.length === 0) {
                purchasesList.innerHTML = '<p>No purchases yet.</p>';
                mockTestsList.innerHTML = '<p>No mock tests purchased yet.</p>';
                pdfsList.innerHTML = '<p>No PDFs purchased yet.</p>';
                return;
            }
            
            currentUser.purchases.forEach(purchase => {
                const purchaseCard = createPurchaseCard(purchase);
                
                // Add to all purchases
                purchasesList.appendChild(purchaseCard.cloneNode(true));
                
                // Add to specific category
                if (purchase.type === 'mock') {
                    mockTestsList.appendChild(purchaseCard.cloneNode(true));
                } else if (purchase.type === 'pdf') {
                    pdfsList.appendChild(purchaseCard.cloneNode(true));
                }
            });
        }

        // Create purchase card
        function createPurchaseCard(purchase) {
            const card = document.createElement('div');
            card.className = 'purchase-card';
            
            const now = new Date();
            const isMockTestExpired = purchase.type === 'mock' && purchase.availableUntil && now > new Date(purchase.availableUntil);
            const isPdfExpired = purchase.type === 'pdf' && purchase.downloadAvailableUntil && now > new Date(purchase.downloadAvailableUntil);
            
            let actionsHTML = '';
            
            if (purchase.type === 'mock') {
                if (isMockTestExpired) {
                    actionsHTML = `<button class="btn btn-outline btn-block" disabled>Expired</button>`;
                } else if (purchase.started && !purchase.completed) {
                    actionsHTML = `<button class="btn btn-primary btn-block" onclick="resumeTest('${purchase.id}')">Resume Test</button>`;
                } else if (purchase.completed) {
                    actionsHTML = `<button class="btn btn-outline btn-block" disabled>Completed</button>`;
                } else {
                    actionsHTML = `<button class="btn btn-primary btn-block" onclick="startPurchasedTest('${purchase.id}')">Start Test</button>`;
                }
                
                if (!isMockTestExpired && !purchase.completed) {
                    const timeLeft = Math.max(0, new Date(purchase.availableUntil) - now);
                    const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
                    const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                    
                    card.innerHTML = `
                        <div class="purchase-header">
                            <div class="purchase-title">${purchase.name}</div>
                            <span class="purchase-type">Mock Test</span>
                        </div>
                        <div class="purchase-details">
                            <p>Purchased on: ${purchase.date}</p>
                            <p class="timer">Time left to start: ${hoursLeft}h ${minutesLeft}m</p>
                        </div>
                        <div class="purchase-actions">
                            ${actionsHTML}
                        </div>
                    `;
                } else {
                    card.innerHTML = `
                        <div class="purchase-header">
                            <div class="purchase-title">${purchase.name}</div>
                            <span class="purchase-type">Mock Test</span>
                        </div>
                        <div class="purchase-details">
                            <p>Purchased on: ${purchase.date}</p>
                            ${isMockTestExpired ? '<p class="timer">Expired</p>' : '<p>Completed</p>'}
                        </div>
                        <div class="purchase-actions">
                            ${actionsHTML}
                        </div>
                    `;
                }
            } else if (purchase.type === 'pdf') {
                if (isPdfExpired) {
                    actionsHTML = `<button class="btn btn-outline btn-block" disabled>Download Expired</button>`;
                } else {
                    actionsHTML = `<button class="btn btn-primary btn-block" onclick="downloadPDF('${purchase.id}')">Download PDF</button>`;
                }
                
                const timeLeft = Math.max(0, new Date(purchase.downloadAvailableUntil) - now);
                const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
                
                card.innerHTML = `
                    <div class="purchase-header">
                        <div class="purchase-title">${purchase.name}</div>
                        <span class="purchase-type">PDF</span>
                    </div>
                    <div class="purchase-details">
                        <p>Purchased on: ${purchase.date}</p>
                        ${!isPdfExpired ? `<p class="timer">Download available for: ${hoursLeft}h</p>` : '<p class="timer">Download expired</p>'}
                    </div>
                    <div class="purchase-actions">
                        ${actionsHTML}
                    </div>
                `;
            }
            
            return card;
        }

        // Start a test
        function startTest(questions, durationInSeconds, title) {
            currentTest = {
                questions: questions,
                duration: durationInSeconds,
                title: title
            };
            
            currentQuestionIndex = 0;
            userAnswers = new Array(questions.length).fill(null);
            timeRemaining = durationInSeconds;
            
            // Hide dashboard, show test interface
            dashboard.style.display = 'none';
            testInterface.style.display = 'block';
            
            // Start timer
            startTimer();
            
            // Display first question
            displayQuestion();
        }

        // Start timer for test
        function startTimer() {
            // Clear any existing timer
            if (testTimerInterval) {
                clearInterval(testTimerInterval);
            }
            
            // Update timer immediately
            updateTimerDisplay();
            
            // Set interval to update timer every second
            testTimerInterval = setInterval(() => {
                timeRemaining--;
                updateTimerDisplay();
                
                // Update progress bar
                const progress = ((currentTest.duration - timeRemaining) / currentTest.duration) * 100;
                testProgress.style.width = `${progress}%`;
                
                // If time is up, finish the test
                if (timeRemaining <= 0) {
                    finishTest();
                }
            }, 1000);
        }

        // Update timer display
        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            testTimer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // Change color when time is running out
            if (timeRemaining < 60) {
                testTimer.style.color = 'var(--danger)';
            } else if (timeRemaining < 300) {
                testTimer.style.color = 'var(--warning)';
            } else {
                testTimer.style.color = 'var(--primary)';
            }
        }

        // Display current question
        function displayQuestion() {
            const question = currentTest.questions[currentQuestionIndex];
            
            // Update question text
            questionText.textContent = `${currentQuestionIndex + 1}. ${question.question}`;
            
            // Clear options
            optionsList.innerHTML = '';
            
            // Add options
            question.options.forEach((option, index) => {
                const li = document.createElement('li');
                li.className = 'option-item';
                if (userAnswers[currentQuestionIndex] === index) {
                    li.classList.add('selected');
                }
                li.textContent = option;
                li.addEventListener('click', () => {
                    // Remove selected class from all options
                    document.querySelectorAll('.option-item').forEach(item => {
                        item.classList.remove('selected');
                    });
                    
                    // Add selected class to clicked option
                    li.classList.add('selected');
                    
                    // Save answer
                    userAnswers[currentQuestionIndex] = index;
                });
                optionsList.appendChild(li);
            });
            
            // Update navigation buttons
            prevQuestionBtn.disabled = currentQuestionIndex === 0;
            nextQuestionBtn.textContent = currentQuestionIndex === currentTest.questions.length - 1 ? 'Finish Test' : 'Next';
        }

        // Finish test and show results
        function finishTest() {
            // Clear timer
            if (testTimerInterval) {
                clearInterval(testTimerInterval);
            }
            
            // Calculate score
            let correct = 0;
            let wrong = 0;
            let skipped = 0;
            
            userAnswers.forEach((answer, index) => {
                if (answer === null) {
                    skipped++;
                } else if (answer === currentTest.questions[index].correctAnswer) {
                    correct++;
                } else {
                    wrong++;
                }
            });
            
            const percentage = Math.round((correct / currentTest.questions.length) * 100);
            
            // Update results
            scorePercentage.textContent = `${percentage}%`;
            correctAnswers.textContent = correct;
            wrongAnswers.textContent = wrong;
            skippedQuestions.textContent = skipped;
            
            // Hide test interface, show results
            testInterface.style.display = 'none';
            resultsSection.style.display = 'block';
            
            // If this was a purchased test, mark it as completed
            if (currentPurchaseProduct && currentPurchaseProduct.type === 'mock') {
                const purchase = currentUser.purchases.find(p => p.name === currentPurchaseProduct.name);
                if (purchase) {
                    purchase.completed = true;
                    localStorage.setItem(`purchases_${currentUser.email}`, JSON.stringify(currentUser.purchases));
                }
            }
        }

        // Start a purchased test
        function startPurchasedTest(purchaseId) {
            const purchase = currentUser.purchases.find(p => p.id == purchaseId);
            if (!purchase) return;
            
            // Check if test is still available
            const now = new Date();
            if (purchase.availableUntil && now > new Date(purchase.availableUntil)) {
                alert('This test has expired. Please purchase again.');
                return;
            }
            
            // Mark as started
            purchase.started = true;
            localStorage.setItem(`purchases_${currentUser.email}`, JSON.stringify(currentUser.purchases));
            
            // Start the test (using sample questions for demo)
            startTest(mockTestQuestions, 100 * 60, purchase.name);
        }

        // Resume a test
        function resumeTest(purchaseId) {
            // For demo, we'll just start a new test
            // In a real implementation, you would load the saved progress
            startPurchasedTest(purchaseId);
        }

        // Download PDF
        function downloadPDF(purchaseId) {
            const purchase = currentUser.purchases.find(p => p.id == purchaseId);
            if (!purchase) return;
            
            // Check if download is still available
            const now = new Date();
            if (purchase.downloadAvailableUntil && now > new Date(purchase.downloadAvailableUntil)) {
                alert('Download period has expired. Please purchase again.');
                return;
            }
            
            // In a real implementation, this would download the actual PDF
            // For demo, we'll just show an alert
            alert(`Downloading ${purchase.name}...\n\nIn a real implementation, this would download the actual PDF file.`);
        }

        // Make functions available globally for onclick handlers
        window.startPurchasedTest = startPurchasedTest;
        window.resumeTest = resumeTest;
        window.downloadPDF = downloadPDF;
    </script>
</body>
</html>